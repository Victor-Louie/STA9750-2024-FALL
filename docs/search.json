[
  {
    "objectID": "mp4.html",
    "href": "mp4.html",
    "title": "mp04",
    "section": "",
    "text": "Mini-Project #04: Monte Carlo-Informed Selection of CUNY Retirement Plans\nThe report presents an analysis of the two retirement plans offered to new faculty at CUNY: the Teachers Retirement System (TRS) and the Optional Retirement Plan (ORP). Each plan has its own benefits and risks. The project focuses on helping individuals make an informed decision about which plan would provide the best long-term financial outcome. Utilizing historical financial data and through a Monte Carlo simulation we can make data-driven decisions on the better plan.\n\nlibrary(officer)\nlibrary(dplyr)\nlibrary(httr)\nlibrary(knitr)\nlibrary(readr)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(jsonlite)\nlibrary(kableExtra)\n\n\n#Task 1&2: Assigned the url and API Key\nFED_API_KEY &lt;- \"b77f239b4ff5c406a3072cfdcaec8978\"\nFED_base_url &lt;- \"https://api.stlouisfed.org/fred/\"\n\n#Series ID for Wage Growth Data from FRED\n\ngrowth_wage_series_id &lt;- \"FRBATLWGT3MMAUMHWGO\"\n\ngrowth_wage_url &lt;- paste0(FED_base_url, \"series/observations\")\n\n#TASK 3: Query parameters\nparams &lt;- list(\n  series_id = growth_wage_series_id,  #key name\n  api_key = FED_API_KEY,             #key name\n  file_type = \"json\",\n  frequency = \"q\",\n  units = \"lin\",\n  start_date = \"2014-04-01\",\n  end_date = \"2024-04-01\"\n)\n\n\n#GET request to the FRED API\nresponse &lt;- GET(growth_wage_url, query = params)\n\n# In the case of a success\nif (status_code(response) == 200) {\n  data &lt;- fromJSON(content(response, \"text\"))\n  observations &lt;- data$observations\n  data_wagegrowth &lt;- as.data.frame(observations)\n  \n  # Display the first few rows of the data\n  head(data_wagegrowth)\n  \n  # Save the data as a CSV file\n  write.csv(data_wagegrowth, \"fred_data_wagegrowth.csv\", row.names = FALSE)\n# In the case of a success\n  cat(\"Data has been successfully downloaded and saved as 'fred_data_wagegrowth.csv'.\\n\")\n} else {\n  # In the case of a failure\n  cat(\"Failed to retrieve data. Status code:\", status_code(response), \"\\n\")\n}\n\n\nwage_growth_data &lt;- read.csv(\"fred_data_wagegrowth.csv\")\nhead(wage_growth_data)  # Display first few rows\n\nThe code above creates the data file for Rate of Wage Growth from my FRED DATA API. These functions handle the data retrieval, while ensuring proper error handling, and format the data appropriately for further analysis.\n\n#Assigned FRED url and API Key\n\nFED_API_KEY &lt;- \"b77f239b4ff5c406a3072cfdcaec8978\"\nFED_base_url &lt;- \"https://api.stlouisfed.org/fred/\"\n\n# Series ID for Inflation data from FRED \n\nInflation_series_id &lt;- \"T10YIE\"\nInflation_url &lt;- paste0(FED_base_url, \"series/observations\")\n\n# Query parameters\nparams &lt;- list(\n  series_id = Inflation_series_id,  #key name\n  api_key = FED_API_KEY,             #key name\n  file_type = \"json\",\n  frequency = \"q\",\n  units = \"lin\",\n  start_date = \"2016-01-01\",\n  end_date = \"2023-01-01\"\n)\n\n#GET request to the FRED API\nresponse &lt;- GET(Inflation_url, query = params)\n\n#In the case of success\n  data &lt;- fromJSON(content(response, \"text\"))\n  observations &lt;- data$observations\n  data_inflation &lt;- as.data.frame(observations)\n  head(data_inflation)\n  # Save the data as a CSV file\n  write.csv(data_inflation, \"fred_data_inflation.csv\", row.names = FALSE)\n\nThe code above creates the data file for Inflation from my FRED DATA API. These functions handle the data retrieval, while ensuring proper error handling, and format the data appropriately for further analysis.\n\n#US Equity Market total returns \nALPHA_API_KEY &lt;-\"IPH58WW96OKFZDVU\"\nSPY_TICKER &lt;- \"SPY\"\nFUNCTION_TYPE &lt;- \"TIME_SERIES_MONTHLY\"\nOUTPUT_SIZE &lt;- \"FULL\"\n\n# Construct the API request URL\nSPY_url &lt;- paste0(\"https://www.alphavantage.co/query?function=\", FUNCTION_TYPE,\n              \"&symbol=\", SPY_TICKER, \n              \"&apikey=\", ALPHA_API_KEY, \n              \"&outputsize=\", OUTPUT_SIZE)\n\n#GET request to the ALPHA API\nresponse &lt;- GET(SPY_url)\n\n# In the case of success\nif (status_code(response) == 200) {\n  data &lt;- content(response, \"parsed\", type = \"application/json\")\n  if (FUNCTION_TYPE == \"TIME_SERIES_MONTHLY\") {\n    time_series &lt;- data[[\"Monthly Time Series\"]]\n    if (!is.null(time_series)) {\n      data_sap500 &lt;- as.data.frame(do.call(rbind, lapply(time_series, unlist)))\n      colnames(data_sap500) &lt;- c(\"open\", \"high\", \"low\", \"close\", \"volume\")\n      data_sap500$date &lt;- rownames(data_sap500)\n      rownames(data_sap500) &lt;- NULL\n      data_sap500$date &lt;- as.Date(paste0(data_sap500$date, \"-01\"))\n      # Print out the first few rows\n      print(head(data_sap500))\n    } else {\n      print(\"Error: No time series data found.\")\n    }\n  }\n} else {\n  # In the case of a failure\n  print(paste(\"Request failed with status:\", status_code(response)))\n  print(content(response, \"text\"))\n}\n\nThe code above creates the data file for US Equity Market total returns from Alpha Vantage. These functions handle the data retrieval, while ensuring proper error handling, and format the data appropriately for further analysis.\n\n#International Equity Market total for VOO\nALPHA_API_KEY &lt;-\"IPH58WW96OKFZDVU\"\nVOO_TICKER &lt;- \"VOO\"\nFUNCTION_TYPE &lt;- \"TIME_SERIES_MONTHLY\"\nOUTPUT_SIZE &lt;- \"FULL\"\n\n# Construct the API request URL\nVOO_url &lt;- paste0(\"https://www.alphavantage.co/query?function=\", FUNCTION_TYPE,\n                  \"&symbol=\", VOO_TICKER, \n                  \"&apikey=\", ALPHA_API_KEY, \n                  \"&outputsize=\", OUTPUT_SIZE)\n\n#GET request to the FRED API\nresponse &lt;- GET(VOO_url)\n\n# In the case of success\nif (status_code(response) == 200) {\n  data &lt;- content(response, \"parsed\", type = \"application/json\")\n  time_series &lt;- data[[\"Monthly Time Series\"]]\n  if (!is.null(time_series)) {\n    data_voo &lt;- as.data.frame(do.call(rbind, lapply(time_series, unlist)))\n    colnames(data_voo) &lt;- c(\"open\", \"high\", \"low\", \"close\", \"volume\")\n    data_voo$date &lt;- rownames(data_voo)\n    rownames(data_voo) &lt;- NULL\n    data_voo$date &lt;- as.Date(data_voo$date)\n    # Print out the first few rows\n    print(head(data_voo))\n  } else {\n    print(\"Error: No time series data found.\")\n  }\n} else {\n  # In the case of a failure\n  print(paste(\"Request failed with status:\", status_code(response)))\n  print(content(response, \"text\"))\n}\n\nThe code above creates the data file for International Equity Market total from Alpha Vantage. These functions handle the data retrieval, while ensuring proper error handling, and format the data appropriately for further analysis.\n\n#SHORT TERM DEBT RETURN\n\nFED_API_KEY &lt;- \"b77f239b4ff5c406a3072cfdcaec8978\"\nFED_base_url &lt;- \"https://api.stlouisfed.org/fred/\"\n\n# Series ID for the debt data\nDebt_series_id &lt;- 'QFRD304INFUSNO'\n\n#API URL for observations\nDebt_url &lt;- paste0(FED_base_url, \"series/observations\")\n\n# Query parameters\nparams &lt;- list(\n  series_id = Debt_series_id,        \n  api_key = FED_API_KEY,            \n  file_type = \"json\",               \n  start_date = \"2014-04-01\",        \n  end_date = \"2024-04-01\"\n)\n\n#GET request to the FRED API\nresponse &lt;- GET(Debt_url, query = params)\n\n# In the case of success\nif (status_code(response) == 200) {\n  data &lt;- fromJSON(content(response, \"text\"))\n  observations &lt;- data$observations\n  if (!is.null(observations)) {\n    data_shortdebts &lt;- as.data.frame(observations)\n    print(head(data_shortdebts))\n    write.csv(data_shortdebts, \"fred_data_shortdebts.csv\", row.names = FALSE)\n    cat(\"Data has been successfully downloaded and saved as 'fred_data_shortdebts.csv'.\\n\")\n  } else {\n    cat(\"No observations found in the response.\\n\")\n  }\n} else {\n  # In the case of a failure\n  cat(\"Failed to retrieve data. Status code:\", status_code(response), \"\\n\")\n}\n\nThe code above creates the data file for Short Term Debt Returns from Alpha Vantage. These functions handle the data retrieval, while ensuring proper error handling, and format the data appropriately for further analysis.\nTask 4: Initial Analysis\n\n#Task 4: Initial Analysis \n\n#Processing Inflation and Wage Growth Data\ndata_inflation$date &lt;- as.Date(data_inflation$date)\ndata_inflation$value &lt;- as.numeric(data_inflation$value)\n\ndata_wagegrowth$date &lt;- as.Date(data_wagegrowth$date)\ndata_wagegrowth$value &lt;- as.numeric(data_wagegrowth$value)\n\n# Merge both datasets using the \"date\" coloumn\ndata_inflationandwages &lt;- merge(data_inflation, data_wagegrowth, by = \"date\", suffixes = c(\"_inflation\", \"_wage_growth\"))\n\n# Rescale the wage growth data \ndata_inflationandwages$scaled_wage_growth &lt;- data_inflationandwages$value_wage_growth / 100000000\n\n# Remove rows with missing values\ndata_inflationandwages &lt;- na.omit(data_inflationandwages)\n\n# Visualizing Inflation and Wage Growth Trends\nggplot(data_inflationandwages, aes(x = date)) +\n  geom_line(aes(y = value_inflation, color = \"Inflation\"), size = 1) +\n  geom_line(aes(y = value_wage_growth, color = \"Wage Growth\"), size = 1) +\n  scale_y_continuous(\n    name = \"Inflation (percent)\",\n    sec.axis = sec_axis(~ ., name = \"Wage Growth\")\n  ) +\n  labs(\n    title = \"Inflation vs Wage Growth\",\n    x = \"Date\",\n    color = \"Legend\"\n  ) +\n  scale_color_manual(values = c(\"Inflation\" = \"red\", \"Wage Growth\" = \"green\")) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"top\"\n  )\n\n\n\n\n\n\n\n# Merge both datasets by the 'date' column\ndata_inflationandwages &lt;- merge(data_inflation, data_wagegrowth, by = \"date\", suffixes = c(\"_inflation\", \"_wage_growth\"))\n\nThe data shows the trends in inflation and wage growth over time. The plot suggests that wages have generally outpaced inflation, through further investigation into the causes of the trends would provide deeper insights.\n\nInflation (Red): Inflation rates show fluctuations but generally remain lower than wage growth. There are periods of slight dips and recoveries, with no extreme spikes in the timeline.\nWage Growth (Green): Wage growth trends are more volatile, with a significant upward spike observed around 2022, followed by a gradual decline.\n\n\n# Calculate the difference between wage growth and inflation\ndata_inflationandwages$wage_growth_minus_inflation &lt;- data_inflationandwages$value_wage_growth - data_inflationandwages$value_inflation\n\n# Create a table with the relevant columns\nwage_inflation_table &lt;- data.frame(\n  Date = data_inflationandwages$date,\n  WageGrowth = data_inflationandwages$value_wage_growth,\n  Inflation = data_inflationandwages$value_inflation,\n  WageGrowthMinusInflation = data_inflationandwages$wage_growth_minus_inflation\n)\nhead(wage_inflation_table, 10) #The top 10 rows\n\nThe table shows the difference between wage growth and inflation based on a quarterly basis. Months with a positive difference means that wage growth beats inflation and thus better economy and vice versa.\n\n#SPY 500 DATA\ndata_sap500quarterlyavg &lt;- data_sap500 |&gt; \n  mutate(\n    open = as.numeric(open),\n    close = as.numeric(close),\n    high = as.numeric(high),\n    low = as.numeric(low),\n    volume = as.numeric(volume),\n    date = as.Date(date),\n    year_quarter = paste(year(date), \"-Q\", quarter(date), sep = \"\")\n  ) |&gt; \n  group_by(year_quarter) |&gt; \n  summarise(\n    avg_open = mean(open, na.rm = TRUE),\n    avg_close = mean(close, na.rm = TRUE),\n    .groups = 'drop'\n  ) |&gt;\n  rename(\n    `Year and Quarter` = year_quarter,\n    `Average Open` = avg_open,\n    `Average Close` = avg_close\n  )\n\ndata_sap500quarterlyavg |&gt;\n  kable() |&gt;\n  kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\"),\n    position = \"center\"\n  ) |&gt;\n  column_spec(1, bold = TRUE) |&gt;  \n  add_header_above(c(\" \" = 1, \"SPY 500 Data\" = 2)) |&gt; \n  row_spec(0, background = \"#4CAF50\", color = \"white\")\n\nThe code processes S&P 500 data to calculate the average opening and closing prices for each quarter, grouping the data by year and quarter. It transforms relevant columns to numeric values, formats the date, and aggregates the averages for each quarter.\nTask 6: Fixed-Rate Analysis\n\n#Task 6: Fixed-Rate Analysis\n# Set Parameters\ndeath_age &lt;- 79 #Average death age\nretirement_age &lt;- 65 #Average retirement age\nretirement_duration_years &lt;- death_age - retirement_age\nwithdrawal_rate &lt;- 0.04 \n\n# Simulate TRS (Teacher Retirement System) Pension Income, adjusted for inflation\nsimulate_trs &lt;- function(monthly_pension, retirement_duration_years, inflation_data) {\n  pension_income &lt;- numeric(retirement_duration_years * 12)\n  for (month in 1:length(pension_income)) {\n    inflation_rate &lt;- ifelse(month %% 12 == 1, \n                             inflation_data$inflation_rate[(month %/% 12) %% nrow(inflation_data) + 1] / 100, \n                             0)\n    if (month == 1) {\n      pension_income[month] &lt;- monthly_pension\n    } else {\n      pension_income[month] &lt;- pension_income[month - 1] * (1 + inflation_rate)\n    }\n  }\n  return(pension_income)\n}\n\n# Simulate ORP (Optional Retirement Plan) Withdrawals based on account balance and market returns\nsimulate_orp &lt;- function(account_balance, market_data, retirement_duration_years, withdrawal_rate) {\n  withdrawals &lt;- numeric(retirement_duration_years * 12)\n  for (month in 1:length(withdrawals)) {\n    if (account_balance &lt;= 0) {\n      withdrawals[month] &lt;- 0\n    } else {\n      market_return &lt;- market_data$us_equity_return[(month - 1) %% nrow(market_data) + 1]\n      account_balance &lt;- account_balance * (1 + market_return)\n      monthly_withdrawal &lt;- account_balance * withdrawal_rate / 12\n      withdrawals[month] &lt;- min(account_balance, monthly_withdrawal)\n      account_balance &lt;- account_balance - withdrawals[month]\n    }\n  }\n  return(withdrawals)\n}\n\n# Updated values for simulation\nmonthly_pension_income &lt;- 3000 \ninitial_retirement_savings &lt;- 500000 \ninflation_data &lt;- tibble(inflation_rate = rep(2, retirement_duration_years)) \nmarket_data &lt;- tibble(us_equity_return = rep(0.05 / 12, retirement_duration_years * 12)) \n\n# Run simulations for TRS and ORP\ntrs_income &lt;- simulate_trs(\n  monthly_pension = monthly_pension_income,\n  retirement_duration_years = retirement_duration_years,\n  inflation_data = inflation_data\n)\n\norp_income &lt;- simulate_orp(\n  account_balance = initial_retirement_savings,\n  market_data = market_data,\n  retirement_duration_years = retirement_duration_years,\n  withdrawal_rate = withdrawal_rate\n)\n\n#Differences in income between TRS and ORP for each month\nincome_difference &lt;- trs_income - orp_income\n\naverage_trs_income &lt;- mean(trs_income)\naverage_orp_income &lt;- mean(orp_income)\nmaximum_income_difference &lt;- max(income_difference)\nminimum_income_difference &lt;- min(income_difference)\norp_depletion_rate &lt;- mean(orp_income == 0) \n\n#Fixed-Rate Analysis\ncat(\"Probability of ORP Savings Depletion Before Death: \", round(orp_depletion_rate * 100, 2), \"%\\n\")\ncat(\"Average Monthly TRS Income: $\", round(average_trs_income, 2), \"\\n\")\ncat(\"Average Monthly ORP Income: $\", round(average_orp_income, 2), \"\\n\")\ncat(\"Maximum Monthly Income Difference (TRS vs ORP): $\", round(maximum_income_difference, 2), \"\\n\")\ncat(\"Minimum Monthly Income Difference (TRS vs ORP): $\", round(minimum_income_difference, 2), \"\\n\")\n\nHere we run a simulation between the two retirement income sources: a fixed Teacher Retirement System (TRS) pension, which adjusts for inflation, and an Optional Retirement Plan (ORP), which draws from an initial account balance with monthly withdrawals based on market returns. The TRS income is adjusted yearly for a 2% inflation rate, while the ORP income is based on a fixed 4% withdrawal rate from an initial savings of $500,000, with a 5% annual return on investments. The results are summarized, providing insights into the financial sustainability of each retirement plan. The code answers:\nProbability of ORP Savings Depletion Before Death:  0 %\nAverage Monthly TRS Income: $ 3422.99  \nAverage Monthly ORP Income: $ 1793.5  \nMaximum Monthly Income Difference (TRS vs ORP): $ 1979.09  \nMinimum Monthly Income Difference (TRS vs ORP): $ 1311.24 \nTask 7: Monte Carlo Comparison\n\n# Monte Carlo Simulation for ORP and TRS Income\nmonte_carlo &lt;- function(num_simulations, initial_orp_balance, monthly_trs_pension, \n                                 fixed_withdrawal_rate, inflation_rate, market_return_data, retirement_years) {\n  \n  results &lt;- tibble()\n  \n  for (sim in 1:num_simulations) {\n    set.seed(sim)\n    \n    # Sample market returns\n    sampled_returns &lt;- sample(market_return_data$us_equity_return, \n                              size = retirement_years * 12, replace = TRUE)\n    \n    # Simulate TRS and ORP streams\n    trs_income_stream &lt;- simulate_trs(monthly_pension = monthly_trs_pension, \n                                      retirement_years = retirement_years, \n                                      inflation_rate = inflation_rate)\n    orp_simulation &lt;- simulate_orp(account_balance = initial_orp_balance, \n                                   retirement_years = retirement_years, \n                                   fixed_withdrawal_rate = fixed_withdrawal_rate, \n                                   market_return_rate = sampled_returns)\n    \n    # Store the simulation results\n    results &lt;- bind_rows(results, tibble(\n      simulation_id = sim,\n      month = 1:(retirement_years * 12),\n      trs_income = trs_income_stream,\n      orp_income = orp_simulation$withdrawal,\n      orp_balance = orp_simulation$balance\n    ))\n  }\n  \n  return(results)\n}\n\nsimulate_trs &lt;- function(monthly_pension, retirement_years, inflation_rate) {\n  inflation_adjustment &lt;- rep(0, retirement_years * 12)\n  inflation_adjustment[seq(1, length(inflation_adjustment), by = 12)] &lt;- (1 + inflation_rate) - 1\n  pension &lt;- monthly_pension * cumprod(1 + c(0, inflation_adjustment[-1]))\n  return(pension)\n}\n\nsimulate_orp &lt;- function(account_balance, retirement_years, fixed_withdrawal_rate, market_return_rate) {\n  withdrawal &lt;- numeric(retirement_years * 12)\n  balance &lt;- numeric(retirement_years * 12)\n  \n  for (i in 1:(retirement_years * 12)) {\n    account_balance &lt;- account_balance * (1 + market_return_rate[i])\n    withdrawal[i] &lt;- min(account_balance, account_balance * fixed_withdrawal_rate / 12)\n    account_balance &lt;- account_balance - withdrawal[i]\n    balance[i] &lt;- account_balance\n  }\n  \n  return(list(withdrawal = withdrawal, balance = balance))\n}\n\nThis code performs a Monte Carlo simulation to model the income streams of the two retirement plans. The simulation runs multiple trials each time sampling market returns and simulating the income and balance of both plans over the retirement period. The results of each simulation, including monthly income from both plans and the remaining ORP balance, are stored for further analysis.\n\n# Set parameters\nset.seed(2024)\nnum_simulations &lt;- 200\ninitial_orp_balance &lt;- 175000 #Average amount\nmonthly_trs_pension &lt;- 2200 #Average Monthly\nfixed_withdrawal_rate &lt;- 0.04\ninflation_rate &lt;- 0.03\nretirement_years &lt;- 30 # retirement age - working age\n\n# Generate random market returns for the simulations\nmarket_return_data &lt;- tibble(us_equity_return = rnorm(360, mean = 0.05 / 12, sd = 0.06))\n\n# Run the Monte Carlo simulation\nsimulation_results &lt;- monte_carlo(\n  num_simulations, initial_orp_balance, monthly_trs_pension, \n  fixed_withdrawal_rate, inflation_rate, market_return_data, retirement_years\n)\n\n# Calculate the probabilities for ORP depletion and ORP income exceeding TRS income\norp_depletion_probability &lt;- mean(simulation_results$orp_balance == 0)\norp_better_than_trs_probability &lt;- mean(simulation_results$orp_income &gt; simulation_results$trs_income)\n\n# Print results\ncat(\"Probability of ORP funds depletion: \", round(orp_depletion_probability * 100, 2), \"%\\n\")\ncat(\"Probability ORP income exceeds TRS income: \", round(orp_better_than_trs_probability * 100, 2), \"%\\n\")\n\n# Compare different withdrawal rates (4% vs 6%)\nsimulation_results_4_percent &lt;- monte_carlo(\n  num_simulations, initial_orp_balance, monthly_trs_pension, 0.04, \n  inflation_rate, market_return_data, retirement_years\n)\n\nsimulation_results_6_percent &lt;- monte_carlo(\n  num_simulations, initial_orp_balance, monthly_trs_pension, 0.06, \n  inflation_rate, market_return_data, retirement_years\n)\n\n# Calculate probabilities for different withdrawal rates\norp_depletion_probability_4_percent &lt;- mean(simulation_results_4_percent$orp_balance == 0)\norp_depletion_probability_6_percent &lt;- mean(simulation_results_6_percent$orp_balance == 0)\n\n# Print probabilities for different withdrawal rates\ncat(\"Probability of ORP funds depletion at 4% withdrawal rate: \", round(orp_depletion_probability_4_percent * 100, 2), \"%\\n\")\ncat(\"Probability of ORP funds depletion at 6% withdrawal rate: \", round(orp_depletion_probability_6_percent * 100, 2), \"%\\n\")\n\nRuns a Monte Carlo simulation to evaluate the outcomes of both plans over a hypothetical data-driven parameters including: 30-year retirement period, considering factors like market returns, inflation, and fixed withdrawal rates (4% and 6%). The script calculates the probability of ORP funds depleting before the end of the retirement period and compares the likelihood that ORP income exceeds TRS income under different withdrawal rates. The code answers:\nProbability of ORP funds depletion:  0 % \nProbability ORP income exceeds TRS income:  3.27 % \nProbability of ORP funds depletion at 4% withdrawal rate:  0 % \nProbability of ORP funds depletion at 6% withdrawal rate:  0 %\nIn Conclusion:\nThe choice between TRS and ORP depends on individual preferences for income stability. Low-Income Employees would benefit from a TRS retirement plan as it is a lesser risk. On the other hand, Medium to High income Employees would benefit greater with a ORP due to the higher risk tolerance."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Resume Link",
    "section": "",
    "text": "Hello World! I am Victor and this is my MS Data Analytics Journey!\n======= Resume: https://drive.google.com/file/d/1NBxrs6lpABXc490gn11aCgdxcY0XMIO8/view?usp=sharing ======="
  }
]